apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.11"
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    tasks.register("jacocoTestReport", JacocoReport) {
        dependsOn("testDebugUnitTest")

        reports {
            xml.required.set(true)
            html.required.set(true)
            csv.required.set(true)
            csv.outputLocation.set(file("${buildDir}/reports/jacoco/testDebugUnitTestCoverage.csv"))
            html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/html"))
        }

        sourceDirectories.setFrom(files(
                "$projectDir/src/main/java",
                "$projectDir/src/main/kotlin"
        ))
        classDirectories.setFrom(fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: [
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        '**/*Activity*.*',
                        '**/*Fragment*.*',
                        '**/*Composable*.*',
                        '**/*Component*.*',
                        '**/*Screen*.*',
                        '**/ui/**/*.*',
                        '**/hilt_aggregated_deps/*.*',
                        '**/codegen/*.*',
                        '**/di/*.*',
                        '**/*_Factory*.java',
                        '**/*_HiltModules*.java',
                        '**/*_HiltModules_KeyModule_*.java',
                        '**/*_GeneratedInjector.*',
                        '**/PokemonApplication.*',
                        '**/data/*.*',
                ]
        ))
        executionData.setFrom(fileTree(dir: buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
        ]))
    }
}

task jacocoAndroidReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Android instrumentation tests"
    dependsOn("connectedDebugAndroidTest")
    // Files for instrumentation tests
    def coverageFile = fileTree(dir: "$buildDir/outputs/code-coverage/connected", includes: ["*.ec"])
    def classesDir = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*'])
    def sourceDirs = files(["src/main/java"])

    executionData(coverageFile)
    sourceDirectories.setFrom(sourceDirs)
    classDirectories.setFrom(classesDir)

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}